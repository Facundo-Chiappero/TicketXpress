generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  name     String
  email    String    @unique
  /// Ãºtil para login con credenciales
  password String?
  role     Role      @default(USER)
  payments Payment[] @relation("UserPayments")
  events   Event[]   @relation("CreatedEvents")

  accounts Account[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  /// asked by google
  image         String?
  emailVerified DateTime?
}

model Event {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  price       Float
  images      String[]
  creator     User      @relation("CreatedEvents", fields: [creatorId], references: [id])
  creatorId   Int
  payments    Payment[] @relation("EventPayments")
}

model Payment {
  id        Int      @id @default(autoincrement())
  user      User     @relation("UserPayments", fields: [userId], references: [id])
  userId    Int
  event     Event?   @relation("EventPayments", fields: [eventId], references: [id], onDelete: SetNull)
  eventId   Int?
  amount    Float
  createdAt DateTime @default(now())
}

/// used for google login
model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum Role {
  ADMIN
  USER
}
